;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_sub_scroll_y
	.export		_YellowSpr
	.export		_BlueSpr
	.export		_N0
	.export		_N1
	.export		_pad1
	.export		_scroll_x
	.export		_scroll_y
	.export		_sprite_x
	.export		_sprite_y
	.export		_temp1
	.export		_palette_bg
	.export		_palette_sp
	.export		_draw_sprites
	.export		_scrolling
	.export		_main

.segment	"DATA"

_sprite_x:
	.byte	$80
_sprite_y:
	.byte	$80

.segment	"RODATA"

_YellowSpr:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$80
_BlueSpr:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$41
	.byte	$80
_N0:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$52
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$00
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$00
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$00
	.byte	$01
	.byte	$EB
	.byte	$01
	.byte	$00
_N1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$D0
	.byte	$D1
	.byte	$00
	.byte	$01
	.byte	$52
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$00
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$00
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$01
	.byte	$EC
	.byte	$01
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_temp1:
	.res	1,$00
.segment	"BSS"

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(sprite_x, sprite_y, YellowSpr);
;
	jsr     decsp2
	lda     _sprite_x
	ldy     #$01
	sta     (sp),y
	lda     _sprite_y
	dey
	sta     (sp),y
	lda     #<(_YellowSpr)
	ldx     #>(_YellowSpr)
	jsr     _oam_meta_spr
;
; oam_spr(20,20,0xfe,1); // 0xfe = X
;
	jsr     decsp3
	lda     #$14
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$FE
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0xff) >> 4;
;
	lda     _scroll_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(28,20,temp1,1);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0x0f);
;
	lda     _scroll_x
	and     #$0F
	sta     _temp1
;
; oam_spr(36,20,temp1,1);
;
	jsr     decsp3
	lda     #$24
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(50,20,0xff,1); // 0xff = Y
;
	jsr     decsp3
	lda     #$32
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$FF
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_y & 0xff) >> 4;
;
	lda     _scroll_y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(58,20,temp1,1);
;
	jsr     decsp3
	lda     #$3A
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_y & 0x0f);
;
	lda     _scroll_y
	and     #$0F
	sta     _temp1
;
; oam_spr(66,20,temp1,1);
;
	jsr     decsp3
	lda     #$42
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     #$01
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ scrolling (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scrolling: near

.segment	"CODE"

;
; if(pad1 & PAD_LEFT){
;
	lda     _pad1
	and     #$02
	beq     L0271
;
; scroll_x -= 1;
;
	lda     _scroll_x
	sec
	sbc     #$01
	sta     _scroll_x
	bcs     L0272
	dec     _scroll_x+1
;
; else if (pad1 & PAD_RIGHT){
;
	jmp     L0272
L0271:	lda     _pad1
	and     #$01
	beq     L0272
;
; scroll_x += 1;
;
	inc     _scroll_x
	bne     L0272
	inc     _scroll_x+1
;
; if(pad1 & PAD_UP){
;
L0272:	lda     _pad1
	and     #$08
	beq     L0273
;
; scroll_y = sub_scroll_y(1, scroll_y);
;
	lda     #$01
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _sub_scroll_y
;
; else if (pad1 & PAD_DOWN){
;
	jmp     L0274
L0273:	lda     _pad1
	and     #$04
	beq     L0265
;
; scroll_y = add_scroll_y(1, scroll_y);
;
	lda     #$01
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
L0274:	sta     _scroll_y
	stx     _scroll_y+1
;
; set_scroll_x(scroll_x);
;
L0265:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jmp     _set_scroll_y

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(N0);
;
	lda     #<(_N0)
	ldx     #>(_N0)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(N1);
;
	lda     #<(_N1)
	ldx     #>(_N1)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0218:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; scrolling();
;
	jsr     _scrolling
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1){
;
	jmp     L0218

.endproc

